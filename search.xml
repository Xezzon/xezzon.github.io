<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/20200918/86b4a0fea4ca/</url>
    <content><![CDATA[<h1 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h1><p>MySQL其实是由两部分构成的——mysql-server和mysql-client，前者为存储数据的部分，后者为操作部分。</p>
<h2 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h2><h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a><a href="https://wiki.archlinux.org/index.php/MariaDB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Arch Linux</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S mariadb</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：mariadb为MySQL的开源实现，也是Arch Linux默认的MySQL的实现。<br>安装完成后，运行之前，执行以下命令：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br></pre></td></tr></table></figure>
<p>至此，MySQL已安装完毕。</p>
<h2 id="运行mysql-server"><a href="#运行mysql-server" class="headerlink" title="运行mysql-server"></a>运行mysql-server</h2><p>执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p>执行完毕，若没有报错，则表示mysql-server已成功的运行在本计算机上了。但是每次重启后需要手动启动。可以使用如下命令，使本计算机每次重启后自动运行mysql-server：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>
<p>初次运行mysql-client,需要执行以下命令，进行数据库密码配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>至此，已经可以开始使用mysql-server了。</p>
<a id="more"></a>

<h2 id="安装mysql-client"><a href="#安装mysql-client" class="headerlink" title="安装mysql-client"></a>安装mysql-client</h2><p>安装Arch Linux的mariadb包会自动安装mariadb-client。若未自动安装，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S mariadb-clients</span><br></pre></td></tr></table></figure>
<h2 id="使用mysql-client连接mysql-server"><a href="#使用mysql-client连接mysql-server" class="headerlink" title="使用mysql-client连接mysql-server"></a>使用mysql-client连接mysql-server</h2><p>执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>执行后，会要求输入root账户密码，该密码为步骤<a href="#%E8%BF%90%E8%A1%8Cmysql-server">运行mysql-server</a>中，执行<code>mysql_secure_installation</code>时设置的密码。</p>
<p>命令执行完毕，shell窗口进入MySQL控制台状态，就可以开始编写和执行SQL语句了。</p>
<h2 id="安装DBeaver"><a href="#安装DBeaver" class="headerlink" title="安装DBeaver"></a>安装<a href="https://dbeaver.io/">DBeaver</a></h2><p>dbeaver的作用与mysql-client是一致的，可以作为mysql-client的替代。</p>
<p>dbeaver是一款开源的、免费的、跨平台的数据库可视化管理工具，它支持主流的SQL数据库，如MySQL、PostgreSQL、Oracle Database、SQLite、SQL Server等。</p>
<p>通过dbeaver可以进行数据库的配置、数据表设计以及SQL语句的编写与执行等操作。</p>
<h1 id="后端的MySQL学习地图"><a href="#后端的MySQL学习地图" class="headerlink" title="后端的MySQL学习地图"></a>后端的MySQL学习地图</h1><p>SQL的基础概念为——CURD（增create,改update,查read,删delete）。通过dbeaver可以非常清晰的看到，MySQL是分为两级的：数据库（database）和数据表（table）。结合两者来看，数据库的基本操作就是对数据库和数据表的增删改查。</p>
<p>基础概念之上，还有一些进阶的概念——约束、索引、explain、视图、事务。</p>
<p>除此之外还有一些概念，但是是DBA要掌握但不需要后端掌握的，包括但不限于引擎、存储过程（《Java开发手册》不推荐使用存储过程，因为<em>存储过程难以调试和扩展，且不具备可移植性</em>）、触发器。</p>
<p>以下命令中的中文均要替换为实际的数据库名、表名或字段名等。</p>
<h2 id="数据库的增、删、改、查"><a href="#数据库的增、删、改、查" class="headerlink" title="数据库的增、删、改、查"></a>数据库的增、删、改、查</h2><p>注：所有命令，既可以通过mysql-client执行，也可以通过dbeaver执行（前面说过，他们的作用是一致的，都是对数据库进行操作）。</p>
<p>新增数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<p>删除数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<p>查询已有数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<p>选择当前数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：关于数据库的操作，往往不需要后端人员手写命令，而是通过数据可视化工具（如dbeaver）进行操作。实际上，需要后端人员手写命令的，只有对数据的增删改查。</p>
</blockquote>
<h2 id="数据表的增、删、改、查"><a href="#数据表的增、删、改、查" class="headerlink" title="数据表的增、删、改、查"></a>数据表的增、删、改、查</h2><p>通过dbeaver可以看到，数据可视化的结果是一张表。从表上看，每一列为一个字段，每一行为一条数据（或称记录）。对应到Java中，一张表为一个<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">JavaBean</a>，字段即为JavaBean的属性，一条记录对应一个JavaBean的对象。每个字段都有其数据类型，也就是说，同一列的数据都是同一类型的。</p>
<p>新增数据表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 数据表名 (字段名1 字段类型, 字段名2 字段类型, ...);</span><br></pre></td></tr></table></figure>

<p>实际开发中，新增数据表的命令比这个复杂得多，但是通常是通过dbeaver进行表设计的，所以这里不详细展开。修改数据表结构亦是如此。</p>
<p>修改数据表结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名 ...;</span><br></pre></td></tr></table></figure>

<p>查看数据表结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DESC 数据表名;</span><br></pre></td></tr></table></figure>

<p>删除数据表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE 数据表名;</span><br></pre></td></tr></table></figure>

<h3 id="字段数据类型"><a href="#字段数据类型" class="headerlink" title="字段数据类型"></a>字段数据类型</h3><p>MySQL数据类型可分五大类：数值型、字符串型、日期时间型、二进制类型、其他类型。</p>
<ul>
<li><p>数值型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小(bytes)</th>
<th>范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT [UNSIGNED]</td>
<td>1</td>
<td>有符号：[-128, 127)<br />无符号：[0, 255)</td>
<td>Java中的Boolean类型映射为MySQL的TINYINT UNSIGNED。</td>
</tr>
<tr>
<td>SMALLINT [UNSIGNED]</td>
<td>2</td>
<td>略</td>
<td>根据数据的实际用途选择合适大小的数值类型。</td>
</tr>
<tr>
<td>MEDIUMINT [UNSIGNED]</td>
<td>3</td>
<td>略</td>
<td>根据数据的实际用途选择合适大小的数值类型。</td>
</tr>
<tr>
<td>INT [UNSIGNED]</td>
<td>4</td>
<td>略</td>
<td>根据数据的实际用途选择合适大小的数值类型。</td>
</tr>
<tr>
<td>BIGINT [UNSIGNED]</td>
<td>8</td>
<td>略</td>
<td>每张表必须包含id字段，且数据类型为BIGINT UNSIGNED。</td>
</tr>
<tr>
<td>DECIMAL(M, D)</td>
<td>min(M+2, D+2)</td>
<td>略</td>
<td>开发中，小数的存储必须使用DECIMAL类型，映射JavaBean中的String或BigDecimal类型。</td>
</tr>
</tbody></table>
<blockquote>
<p>对于整数类型，长度为n，则有符号范围为[-2^8·n-1^, 2^8·n-1^-1)，无符号范围为[0, 2^8·n^-1)。</p>
</blockquote>
<p>不常用</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小(bytes)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT [UNSIGNED]</td>
<td>4</td>
<td>FLOAT存储小数会存在精度损失，所以开发中不使用此类型。</td>
</tr>
<tr>
<td>DOUBLE [UNSIGNED]</td>
<td>8</td>
<td>DOUBLE存储小数会存在精度损失，所以开发中不使用此类型。</td>
</tr>
</tbody></table>
</li>
<li><p>字符串型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>长度(bytes)</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR</td>
<td>0 - (2^8^-1)</td>
<td>定长字符串</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0 - (2^16^-1)</td>
<td>变长字符串</td>
</tr>
<tr>
<td>TEXT</td>
<td>0 - (2^16^-1)</td>
<td>长文本数据</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0 - (2^8^-1)</td>
<td></td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0 - (2^24^-1)</td>
<td></td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0 - (2^32^-1)</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>日期时间型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>格式</th>
<th>大小(bytes)</th>
</tr>
</thead>
<tbody><tr>
<td>TIMESTAMP</td>
<td>yyyy-MM-dd HH:mm:ss</td>
<td>4</td>
</tr>
<tr>
<td>DATE</td>
<td>yyyy-MM-dd</td>
<td>3</td>
</tr>
<tr>
<td>TIME</td>
<td>HH:mm:ss</td>
<td>3</td>
</tr>
</tbody></table>
<blockquote>
<p>TIMESTAMP会将时间存储为UTC时间，而DATETIME不会，所以实际开发中，使用TIMESTAMP而不是DATETIME，需要注意的是，这一点与《Java开发手册》相悖。至于为什么《Java开发手册》不建议使用TIMESTAMP，个人猜测是因为TIMESTAMP只能用到2038-1-19 11:14:07。</p>
</blockquote>
<p>不常用</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>格式</th>
<th>大小(bytes)</th>
</tr>
</thead>
<tbody><tr>
<td>DATETIME</td>
<td>yyyy-MM-dd HH:mm:ss</td>
<td>8</td>
</tr>
<tr>
<td>YEAR</td>
<td>YYYY</td>
<td>1</td>
</tr>
</tbody></table>
</li>
<li><p>二进制类型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>BIT</td>
</tr>
<tr>
<td>BINARY</td>
</tr>
<tr>
<td>BLOB</td>
</tr>
<tr>
<td>VARBINARY</td>
</tr>
<tr>
<td>TINYBLOB</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
</tr>
<tr>
<td>LONGBLOB</td>
</tr>
</tbody></table>
</li>
<li><p>其他类型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>json</td>
<td>应用场景特别少。存储非结构化的数据建议使用NoSQL型的数据库；存储JSON文本可以使用TEXT类型。如果要在SQL中使用json类型，类型处理器得自己写。</td>
</tr>
<tr>
<td>BOOL</td>
<td>BOOL的底层是TINYINT(1)</td>
</tr>
<tr>
<td>ENUM</td>
<td>不建议使用。即便要对Java中的枚举进行映射，也建议使用Mybatis的EnumOrdinalTypeHandler，在MySQL中对应字段使用TINYINT UNSIGNED或SMALLINT UNSIGNED类型，注意，若使用EnumOrdinalTypeHandler，enum中枚举值的顺序不能改变！</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="数据的增、删、改"><a href="#数据的增、删、改" class="headerlink" title="数据的增、删、改"></a>数据的增、删、改</h2><p>插入数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名(字段1, 字段2, ...) </span><br><span class="line">VALUES (value1, value2, ...),</span><br><span class="line">    (value1, value2, ...),</span><br><span class="line">    ...;</span><br></pre></td></tr></table></figure>

<p>更新数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE 表名</span><br><span class="line">SET</span><br><span class="line">    字段1 &#x3D; 表达式1,</span><br><span class="line">    字段2 &#x3D; 表达式2,</span><br><span class="line">    ...</span><br><span class="line">WHERE</span><br><span class="line">    条件;</span><br></pre></td></tr></table></figure>

<p>删除数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 WHERE 条件;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure>

<h2 id="数据的查询"><a href="#数据的查询" class="headerlink" title="数据的查询"></a>数据的查询</h2><p>对数据的增删改查是MySQL基础操作的重点，查询又是数据增删改查的重点。对数据的查询从易至难分别是一般查询、聚合查询、分页查询、多表联查。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    t1.字段1, t1.字段2, t2.字段3, t2.字段4, ...</span><br><span class="line">FROM</span><br><span class="line">    表1 AS t1</span><br><span class="line">[INNER | LEFT | RIGHT] JOIN 表2 AS t2</span><br><span class="line">ON 联合条件</span><br><span class="line">WHERE 查询条件</span><br><span class="line">GROUP BY t1.字段1</span><br><span class="line">HAVING 分组条件</span><br><span class="line">ORDER BY t2.字段2</span><br><span class="line">LIMIT 页码, 页面大小;</span><br></pre></td></tr></table></figure>

<p>其中，第1-4行为必需的。第5行为多表联查，第6-10行为聚合查询，第11行为分页查询。</p>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h2 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h2><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h2 id="数据表约束"><a href="#数据表约束" class="headerlink" title="数据表约束"></a>数据表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><blockquote>
<p><strong>禁止使用外键约束。</strong>外键概念需要在应用层解决，因为它会影响数据的插入速度。</p>
</blockquote>
<h3 id="唯一值约束"><a href="#唯一值约束" class="headerlink" title="唯一值约束"></a>唯一值约束</h3><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><blockquote>
<p><strong>所有字段都设置非空约束。</strong>字符串类型的null值默认为空字符串，数值类型的null值默认为0，日期类型的null值默认为current_timestamp()或是”‘0000-00-00 00:00:00’”。</p>
<p>个人体会：将所有字段设置为非空，那么从数据库中查出的数据就不存在null值，一则，可以避免烦人的NPE和null值判断，二则，将返回前端的数据设置不序列化null值，可以达到控制响应字段的效果。</p>
</blockquote>
<h3 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h3><p>MySQL不要求掌握检查约束。</p>
<h2 id="索引与explain优化"><a href="#索引与explain优化" class="headerlink" title="索引与explain优化"></a>索引与explain优化</h2><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul>
<li>普通索引</li>
</ul>
<ul>
<li>主键索引</li>
</ul>
<ul>
<li>唯一索引</li>
</ul>
<h2 id="Java类型与MySQL类型映射"><a href="#Java类型与MySQL类型映射" class="headerlink" title="Java类型与MySQL类型映射"></a>Java类型与MySQL类型映射</h2><table>
<thead>
<tr>
<th>Java类型</th>
<th>MySQL类型</th>
<th>Mybatis类型处理器</th>
</tr>
</thead>
<tbody><tr>
<td>java.lang.Boolean</td>
<td>TINYINT(1) UNSIGNED</td>
<td>BooleanTypeHandler</td>
</tr>
<tr>
<td>java.lang.Integer</td>
<td>TINYINT, SAMLLINT [UNSIGNED], MEDIUMINT [UNSIGNED], INT</td>
<td>IntegerTypeHandler</td>
</tr>
<tr>
<td>java.lang.Long</td>
<td>INT UNSIGNED, BIGINT</td>
<td>LongTypeHandler</td>
</tr>
<tr>
<td>java.math.BigInteger</td>
<td>BIGINT UNSIGNED</td>
<td>无自带的类型处理器</td>
</tr>
<tr>
<td>java.lang.String</td>
<td>CHAR, VARCHAR, TEXT</td>
<td>StringTypeHandler</td>
</tr>
<tr>
<td>java.time.LocalDateTime</td>
<td>TIMESTAMP</td>
<td>LocalDateTimeTypeHandler</td>
</tr>
<tr>
<td>java.time.LocalDate</td>
<td>DATE</td>
<td>LocalDateTypeHandler</td>
</tr>
<tr>
<td>java.time.LocalTime</td>
<td>TIME</td>
<td>LocalTimeTypeHandler</td>
</tr>
<tr>
<td><Enumeration Type></td>
<td>VARCHAR, TINYINT UNSIGNED, SMALLINT UNSIGNED</td>
<td>EnumTypeHandler/EnumOrdinalTypeHandler</td>
</tr>
</tbody></table>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="SQL与MySQL的关系"><a href="#SQL与MySQL的关系" class="headerlink" title="SQL与MySQL的关系"></a>SQL与MySQL的关系</h2><p>RDBMS：Relational Database Management System，关系型数据库管理系统。 </p>
<p>MySQL：MySQL是RDBMS的一个实例。</p>
<p>SQL：Stuctured Query Language，结构化查询语言。是一种基于关系型数据库的语言标准，但是不同的RDBMS的实例（如Oracle Database和MySQL）对SQL的实现不尽相同。其实这种情况不止出现在SQL语言上，大名鼎鼎的C语言，也有很多“方言”。</p>
<h2 id="数据库规范"><a href="#数据库规范" class="headerlink" title="数据库规范"></a>数据库规范</h2><h1 id="MySQL知识点挖掘"><a href="#MySQL知识点挖掘" class="headerlink" title="MySQL知识点挖掘"></a>MySQL知识点挖掘</h1><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>未完待续…</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/20200807/66d38384eb32/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
</search>
